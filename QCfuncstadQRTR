# -*- coding: utf-8 -*-
"""
Created on Tue Oct 13 14:03:57 2015

@author: mbyx9dl2
"""
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import scipy.integrate
from mpl_toolkits.mplot3d import Axes3D

def OE(state):
    if state%2 == 0:
        return 1
    else:
        return -1

def delta(x,a):
    if x==a:
        return 1
    else:
        return 0

def inside(i,j, c, r):
    xr = (c+1)-(r+1)/2
    yr = (r+1)/2
    xl = (r+1)/2
    yl = yr
    R = (r+1)/2-1
    
    if (j>=xl) and (j<=xr):
        return 1
    else:
        if(j<xl)and((j-xl)**2+(i-yl)**2<=R**2):
            return 1
        elif(j>xr)and((j-xr)**2+(i-yr)**2<=R**2):
            return 1
        else: return 0
        
def genMatrix(i,j,a,b):
    M = []
    for marker in range(0,len(i)):
        R=[None]*len(i)
        for k in range(0, len(i)):
            
            if marker == 0:
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] = -1
                else:
                    R[k] = 0
                    
            elif marker == (len(i)-1):
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] = -1        
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] = -1
                else:
                    R[k] = 0
                    
            else:
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] = -1
                else:
                    R[k] = 0
        M.append(R)
    M = np.array(M)
    return M
        
        
    
def I(i,j, C):
    I=0
    for k in range(0,i-1):
        I = I + C[k]
    I = I+j
    return I
    
def ij(I,c):
    i = (I-1)//c +1
    j = (I-1)%c +1
    return i,j
  
'''  
def findStateNumber( state_x, state_y):
    # currently doesn't return correct state at higher state indices
    counter=0
    if state_x > state_y:
        counter = 1
    
    
    big_step = max(a,b)
    small_step = min(a,b)
    deg_count = 0 
    for i in range(1,n):
        for j in range(1,n):
            if ((i**2/a**2)+(j**2/b**2)) < ((state_x**2/a**2)+(state_y**2/b**2)):
                s.append((i**2)+(j**2))
                print(i,j)
            if ((i**2/a**2)+(j**2/b**2)) == ((state_x**2/a**2)+(state_y**2/b**2)):
                deg_count = deg_count+1
    print('Number state in list = %i ' % len(s))
    print('DEGENERACY COUNT: %i' %deg_count)
'''    
    
def arrayFromZ0(v, c, r, C, xt, yt):
    Colsum = 0
    z=[None]*r
    print(v)
    for i in range(0,r):
        z[i] = (v[Colsum:Colsum+C[i]])
        Colsum = Colsum+C[i]
    #print(z)
    z = np.array(z)
    zero = np.zeros(((r+2), (c+2)))
    for i in range(0,r):
        for j in range(0,C[i]): 
            np.put(zero[i+1], [(c+2-C[i])/2+j], z[i][j])
    z = zero#*zero
    '''
    Ix=[]
    for i in range(0,r+2):
        Ix.append(scipy.integrate.simps(z[i,:], x=xt))
        
    I = scipy.integrate.simps(Ix, x=yt)
    z=z/I
    '''
    return z
    
def arrayFromZ(v, c, r, C, xt, yt):
    Colsum = 0
    z=[None]*r
    print(v)
    for i in range(0,(r+1)//2):
        z[i] = (v[Colsum:Colsum+C[i]])
        #print(z[i])
        Colsum = Colsum+C[i]
    #print(z)
    z = np.array(z)
    zero = np.zeros(((r+2), (c+2)))
    zero2 = np.zeros(((r+2), (c+2)))
    zero3 = np.zeros(((r+2), (c+2)))
    zero4 = np.zeros(((r+2), (c+2)))
    
    for i in range(0,(r+1)//2):
        for j in range(0,C[i]): 
            np.put(zero[(i+1)], [((c+2-(2*C[i]-1))/2+j)], z[i][j])
            np.put(zero2[i+1], [(c+1)-( (c+2-(2*C[i]-1))/2+j )], z[i][j])
            np.put(zero3[(r+1)-(i+1)], [(c+2-(2*C[i]-1))/2+j], z[i][j])
            np.put(zero4[(r+1)-(i+1)], [(c+1)-( (c+2-(2*C[i]-1))/2+j )], z[i][j])
            
    z=zero+zero2+zero3+zero4

    for i in range(0,r+2):
        z[i,(c+1)/2] = z[i,(c+1)/2] / np.sqrt(2)
        '''
    for j in range(0,c+2):                       
            z[(r+1)/2,j] = z[(r+1)/2,j] / np.sqrt(2)  
      '''

    #z = z*z
    print(z)
    '''
    Ix=[]
    for i in range(0,r+2):
        Ix.append(scipy.integrate.simps(z[i,:], x=xt))
        
    I = scipy.integrate.simps(Ix, x=yt)
    z=z/I
    '''
    return z
    
def plotMap(xmap,ymap):
    fig = plt.figure(figsize=(15,15))
    plt.plot(xmap, ymap, 'ro')
    plt.title('Points', fontsize=30)
    plt.xlabel('$x$',fontsize=20)
    plt.ylabel('$y$',fontsize=20)
    plt.show()
    fig.savefig('Map.png')

def plot2Dpsi(X,Y,z,m):

    fig = plt.figure(figsize=(10,8))
    ax = fig.add_subplot(111, projection='3d')
    surf = ax.plot_surface(X,Y,z, cmap=cm.coolwarm, cstride=1, rstride=1)
    fig.colorbar(surf)
    plt.xlabel('$x_i$',fontsize=20)
    plt.ylabel('$y_i$',fontsize=20)
    ax.set_zlabel('$|\psi|^2$',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('2Dwell_%i.png' %m)
    
def plotEnergies(nt, E, Et):
    fig = plt.figure(figsize=(15,10))
    plt.plot(nt, E, label='Numeric')
    #plt.plot(nt,Et, label='Analytic')
    plt.title('Energy vs n', fontsize=30)
    plt.xlabel('$n$',fontsize=20)
    plt.ylabel('$Energy$',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('2D_E_vs_n.png')
    
    
def plotContour(X,Y,z, m):
    fig = plt.figure(figsize=(15,10))
    plt.contourf(X, Y, z, 100, cmap=cm.gist_rainbow)
    plt.title('Contour plot for %ith energy' %m, fontsize=14)
    plt.xlabel('$x$',fontsize=20)
    plt.ylabel('$y$',fontsize=20)
    plt.colorbar()
    plt.show()
    fig.savefig('Contour_%i.png' %m)

