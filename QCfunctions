# -*- coding: utf-8 -*-
"""
Created on Tue Oct 13 14:03:57 2015
import numpy as np
c=4
r=3
a = np.zeros((r+2,c+2))

b = [[1,2],[2,3,4,5],[6,7]]
C=[2,4,2]

for i in range(0,r):
    for j in range(0,C[i]): 
        np.put(a[i+1], [(c+2-C[i])/2+j], b[i][j])
print(a)

@author: mbyx9dl2
"""
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D

def inside(i,j, c, r):
    xr = (c+1)-(r+1)/2
    yr = (r+1)/2
    xl = (r+1)/2
    yl = yr
    R = (r+1)/2-1
    
    if (j>=xl) and (j<=xr):
        return 1
    else:
        if(j<xl)and((j-xl)**2+(i-yl)**2<=R**2):
            return 1
        elif(j>xr)and((j-xr)**2+(i-yr)**2<=R**2):
            return 1
        else: return 0
        
def circle(x, r):
    R = (r+1+1)/2
    y = R+np.sqrt(R**2-(x-R)**2)
    return -y
    
def I(i,j,c):
    I = (i-1)*c+j
    return I
    
def ij(I,c):
    i = (I-1)//c +1
    j = (I-1)%c +1
    return i,j
    
def createMatrix(x, y, c, r):
    a = x/c # spacing in x axis
    b = y/r # spacing in y axis
    n = r*c
    
    H = np.zeros((n,n))
    i,j = np.indices(H.shape)
    H[i==j] = 2*((a**2)+(b**2))
    H[i==j-1] = -b**2
    H[i==j+1] = -b**2
    
    
    larger = max(r,c)
    smaller = min(r,c)
    if r == c:
        larger = r
        smaller = r
    
    H[i==j+larger] = -a**2
    H[i==j-larger] = -a**2
    for k in range(1,smaller):
        ks = k*larger
        if(ks)<=n:
            H[ks-1,ks] = 0
            H[ks,ks-1] = 0
    return H;
    #print(H)
    
def findStateNumber( state_x, state_y):
    # currently doesn't return correct state at higher state indices
    counter=0
    if state_x > state_y:
        counter = 1
    
    
    big_step = max(a,b)
    small_step = min(a,b)
    deg_count = 0 
    for i in range(1,n):
        for j in range(1,n):
            if ((i**2/a**2)+(j**2/b**2)) < ((state_x**2/a**2)+(state_y**2/b**2)):
                s.append((i**2)+(j**2))
                print(i,j)
            if ((i**2/a**2)+(j**2/b**2)) == ((state_x**2/a**2)+(state_y**2/b**2)):
                deg_count = deg_count+1
    print('Number state in list = %i ' % len(s))
    print('DEGENERACY COUNT: %i' %deg_count)
    
def arrayFromZ(v, c, r):
    # Reshape the eigenvector
    z = v.reshape((r,c))
    # Add in boundary conditions
    z = np.insert(z,0,0, axis=1)
    z = np.insert(z,c+1,0, axis=1)
    z = np.insert(z, 0,0,axis=0)
    zero = np.zeros((1,c+2))
    z = np.append(z,zero, axis=0 )
    z = z*z
    return z

def plot2Dpsi(X,Y,z,ansatz):

    fig = plt.figure(figsize=(10,8))
    ax = fig.add_subplot(111, projection='3d')
    surf = ax.plot_surface(X,Y,z, cmap=cm.coolwarm, cstride=1, rstride=1)
    ans = ax.plot_wireframe(X,Y,ansatz, cstride=1, rstride=1)
    fig.colorbar(surf)
    plt.xlabel('$x_i$',fontsize=20)
    plt.ylabel('$y_i$',fontsize=20)
    ax.set_zlabel('$|\psi|^2$',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('2Dwell.png')
    
def plotEnergies(nt, E, Et):
    fig2 = plt.figure(figsize=(15,10))
    plt.plot(nt, E, label='Numeric')
    plt.plot(nt,Et, label='Analytic')
    plt.title('Energy vs n', fontsize=30)
    plt.xlabel('$n$',fontsize=20)
    plt.ylabel('$Energy$',fontsize=20)
    plt.legend()
    plt.show()
    fig2.savefig('2D_E_vs_n.png')
